// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String   // Store hashed password
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Posts created by this user
  posts Post[]

  // Following relationship - users this user follows
  following Follow[] @relation("UserFollowing")
  
  // Followers relationship - users following this user
  followers Follow[] @relation("UserFollowers")

  @@map("users")
}

model Post {
  id        String   @id @default(cuid())
  content   String
  mediaUrl  String?  // Optional media attachment
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Author of the post
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([createdAt])
  @@map("posts")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String   // User who is following
  followingId String   // User being followed
  createdAt   DateTime @default(now())

  // Relations
  follower  User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  // Prevent duplicate follows
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}
